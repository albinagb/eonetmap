{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport L from \"leaflet\";\nimport \"leaflet.markercluster/dist/leaflet.markercluster\";\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\nimport { useLeaflet } from \"react-leaflet\";\nimport { customMarker } from \"./constants\";\nconst mcg = L.markerClusterGroup();\n\nconst MarkerCluster = ({\n  markers\n}) => {\n  _s();\n\n  const {\n    map\n  } = useLeaflet();\n  useEffect(() => {\n    mcg.clearLayers();\n    markers.forEach(({\n      position,\n      text\n    }) => L.marker(new L.LatLng(position.lat, position.lng), {\n      icon: customMarker\n    }).addTo(mcg).bindPopup(text.Station)); // optionally center the map around the markers\n    // map.fitBounds(mcg.getBounds());\n    // // add the marker cluster group to the map\n\n    map.addLayer(mcg);\n  }, [markers, map]);\n  return null;\n};\n\n_s(MarkerCluster, \"+syOB7ozccyMNsnl2GtxQMWtaB0=\", false, function () {\n  return [useLeaflet];\n});\n\n_c = MarkerCluster;\nMarkerCluster.propTypes = {\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    position: PropTypes.objectOf(PropTypes.number).isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired\n};\nexport default MarkerCluster;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarkerCluster\");","map":{"version":3,"sources":["/Users/alba/Desktop/re-maps/src/MarkerCluster.js"],"names":["useEffect","PropTypes","L","useLeaflet","customMarker","mcg","markerClusterGroup","MarkerCluster","markers","map","clearLayers","forEach","position","text","marker","LatLng","lat","lng","icon","addTo","bindPopup","Station","addLayer","propTypes","arrayOf","shape","objectOf","number","isRequired","string"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,kDAAP;AACA,OAAO,8CAAP;AACA,OAAO,sDAAP;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,GAAG,GAAGH,CAAC,CAACI,kBAAF,EAAZ;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAUN,UAAU,EAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,GAAG,CAACK,WAAJ;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgB,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KACdX,CAAC,CAACY,MAAF,CAAS,IAAIZ,CAAC,CAACa,MAAN,CAAaH,QAAQ,CAACI,GAAtB,EAA2BJ,QAAQ,CAACK,GAApC,CAAT,EAAmD;AACjDC,MAAAA,IAAI,EAAEd;AAD2C,KAAnD,EAGGe,KAHH,CAGSd,GAHT,EAIGe,SAJH,CAIaP,IAAI,CAACQ,OAJlB,CADF,EAFc,CAUd;AACA;AACA;;AACAZ,IAAAA,GAAG,CAACa,QAAJ,CAAajB,GAAb;AACD,GAdQ,EAcN,CAACG,OAAD,EAAUC,GAAV,CAdM,CAAT;AAgBA,SAAO,IAAP;AACD,CApBD;;GAAMF,a;UACYJ,U;;;KADZI,a;AAsBNA,aAAa,CAACgB,SAAd,GAA0B;AACxBf,EAAAA,OAAO,EAAEP,SAAS,CAACuB,OAAV,CACPvB,SAAS,CAACwB,KAAV,CAAgB;AACdb,IAAAA,QAAQ,EAAEX,SAAS,CAACyB,QAAV,CAAmBzB,SAAS,CAAC0B,MAA7B,EAAqCC,UADjC;AAEdf,IAAAA,IAAI,EAAEZ,SAAS,CAAC4B,MAAV,CAAiBD;AAFT,GAAhB,EAGGA,UAJI,EAKPA;AANsB,CAA1B;AASA,eAAerB,aAAf","sourcesContent":["import { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport L from \"leaflet\";\nimport \"leaflet.markercluster/dist/leaflet.markercluster\";\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\nimport { useLeaflet } from \"react-leaflet\";\nimport { customMarker } from \"./constants\";\n\nconst mcg = L.markerClusterGroup();\n\nconst MarkerCluster = ({ markers }) => {\n  const { map } = useLeaflet();\n\n  useEffect(() => {\n    mcg.clearLayers();\n    markers.forEach(({ position, text }) =>\n      L.marker(new L.LatLng(position.lat, position.lng), {\n        icon: customMarker,\n      })\n        .addTo(mcg)\n        .bindPopup(text.Station)\n    );\n\n    // optionally center the map around the markers\n    // map.fitBounds(mcg.getBounds());\n    // // add the marker cluster group to the map\n    map.addLayer(mcg);\n  }, [markers, map]);\n\n  return null;\n};\n\nMarkerCluster.propTypes = {\n  markers: PropTypes.arrayOf(\n    PropTypes.shape({\n      position: PropTypes.objectOf(PropTypes.number).isRequired,\n      text: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MarkerCluster;\n"]},"metadata":{},"sourceType":"module"}