{"ast":null,"code":"var _jsxFileName = \"/Users/alba/Documents/GitHub/pricemap/src/MainMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport Filters from \"./components/Filters\";\nimport MarkerCluster from \"./components/MarkerCluster\";\nimport { customMarker } from \"./components/constants\";\nimport { RedMarker } from \"./components/RedMarker\";\nimport FormMainBtn from \"./components/FormMainBtn\";\nimport useToggle from \"./components/useToggle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst position = [45.503, -73.595];\nconst mapStyle = {\n  height: \"100vh\"\n};\n\nfunction NewDataArray(data) {\n  let dataClean = [];\n  data.forEach(element => {\n    if (element.status === \"Available\") {\n      dataClean.push({\n        position: {\n          lng: element.Longitude,\n          lat: element.Latitude\n        },\n        text: PriceData(element),\n        style: customMarker\n      });\n    } else if (element.status === \"Removed\") {\n      dataClean.push({\n        position: {\n          lng: element.Longitude,\n          lat: element.Latitude\n        },\n        text: PriceData(element),\n        style: RedMarker\n      });\n    }\n  });\n  return dataClean;\n}\n\n_c = NewDataArray;\n\nfunction PriceData(element) {\n  let labelText = `No.: <a target=\"blank\" href=\"${element.url}\">${element.MlsNumber}</a>: ${element.Bedrooms} rooms, ${element.Parking} parking${element.year === 0 ? \"\" : `, year ` + element.year}</br></br>\n  ${element.ListingAddress}</br></br>`;\n  const data = element.history;\n  data[0].forEach((element, indx) => {\n    labelText = `${labelText} ∙ ${element}: ${data[1][indx]} </br>`;\n  });\n  labelText = `${labelText}</br>${element.weeks_on_market} weeks on market</br>status as of ${element.updated}: ${element.status}`;\n  return labelText;\n}\n\n_c2 = PriceData;\n\nconst MainMap = ({\n  data = []\n}) => {\n  _s();\n\n  let dataClean = NewDataArray(data);\n  const [markers, setMarkers] = useState(dataClean); // btn toggle function\n\n  const [isOpen, setIsOpen] = useToggle();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Map, {\n      center: position,\n      zoom: 2,\n      style: mapStyle,\n      maxZoom: 18,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        className: \"test\",\n        url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkerCluster, {\n        markers: markers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: isOpen ? {\n        visibility: \"hidden\"\n      } : {\n        visibility: \"visible\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Filters, {\n        data: data,\n        setMarkers: setMarkers,\n        PriceData: PriceData,\n        markers: markers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormMainBtn, {\n      styleBtn: {\n        visibility: \"visible\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-btn right floated column right aligned\",\n      style: isOpen ? {\n        visibility: \"visible\"\n      } : {\n        visibility: \"visible\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        \"aria-hidden\": \"true\",\n        className: \"close link icon\",\n        onClick: setIsOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainMap, \"WYBCMj9JIWQ7H4mmAe+gXQdJdXA=\", false, function () {\n  return [useToggle];\n});\n\n_c3 = MainMap;\nexport default MainMap;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NewDataArray\");\n$RefreshReg$(_c2, \"PriceData\");\n$RefreshReg$(_c3, \"MainMap\");","map":{"version":3,"sources":["/Users/alba/Documents/GitHub/pricemap/src/MainMap.js"],"names":["React","useState","useReducer","Map","TileLayer","Filters","MarkerCluster","customMarker","RedMarker","FormMainBtn","useToggle","position","mapStyle","height","NewDataArray","data","dataClean","forEach","element","status","push","lng","Longitude","lat","Latitude","text","PriceData","style","labelText","url","MlsNumber","Bedrooms","Parking","year","ListingAddress","history","indx","weeks_on_market","updated","MainMap","markers","setMarkers","isOpen","setIsOpen","visibility"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport Filters from \"./components/Filters\";\nimport MarkerCluster from \"./components/MarkerCluster\";\nimport { customMarker } from \"./components/constants\";\nimport { RedMarker } from \"./components/RedMarker\";\nimport FormMainBtn from \"./components/FormMainBtn\";\nimport useToggle from \"./components/useToggle\";\n\nconst position = [45.503, -73.595];\nconst mapStyle = { height: \"100vh\" };\n\nfunction NewDataArray(data) {\n  let dataClean = [];\n  data.forEach((element) => {\n    if (element.status === \"Available\") {\n      dataClean.push({\n        position: { lng: element.Longitude, lat: element.Latitude },\n        text: PriceData(element),\n        style: customMarker,\n      });\n    } else if (element.status === \"Removed\") {\n      dataClean.push({\n        position: { lng: element.Longitude, lat: element.Latitude },\n        text: PriceData(element),\n        style: RedMarker,\n      });\n    }\n  });\n  return dataClean;\n}\n\nfunction PriceData(element) {\n  let labelText = `No.: <a target=\"blank\" href=\"${element.url}\">${\n    element.MlsNumber\n  }</a>: ${element.Bedrooms} rooms, ${element.Parking} parking${\n    element.year === 0 ? \"\" : `, year ` + element.year\n  }</br></br>\n  ${element.ListingAddress}</br></br>`;\n  const data = element.history;\n  data[0].forEach((element, indx) => {\n    labelText = `${labelText} ∙ ${element}: ${data[1][indx]} </br>`;\n  });\n\n  labelText = `${labelText}</br>${element.weeks_on_market} weeks on market</br>status as of ${element.updated}: ${element.status}`;\n\n  return labelText;\n}\n\nconst MainMap = ({ data = [] }) => {\n  let dataClean = NewDataArray(data);\n  const [markers, setMarkers] = useState(dataClean);\n\n  // btn toggle function\n\n  const [isOpen, setIsOpen] = useToggle();\n\n  return (\n    <>\n      <Map center={position} zoom={2} style={mapStyle} maxZoom={18}>\n        <TileLayer\n          className=\"test\"\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <MarkerCluster markers={markers} />\n      </Map>\n\n      <div\n        style={isOpen ? { visibility: \"hidden\" } : { visibility: \"visible\" }}\n      >\n        <Filters\n          data={data}\n          setMarkers={setMarkers}\n          PriceData={PriceData}\n          markers={markers}\n        />\n      </div>\n\n      <FormMainBtn styleBtn={{ visibility: \"visible\" }} />\n      <div\n        className=\"form-btn right floated column right aligned\"\n        style={isOpen ? { visibility: \"visible\" } : { visibility: \"visible\" }}\n      >\n        <i\n          aria-hidden=\"true\"\n          className=\"close link icon\"\n          onClick={setIsOpen}\n        ></i>\n      </div>\n    </>\n  );\n};\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}