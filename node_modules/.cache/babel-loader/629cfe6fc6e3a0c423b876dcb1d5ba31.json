{"ast":null,"code":"var _jsxFileName = \"/Users/alba/Documents/GitHub/pricemap/src/MainMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport MarkerCluster from \"./MarkerCluster\";\nimport data from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst position = [45.503, -73.595];\nconst mapStyle = {\n  height: \"90vh\"\n};\nlet dataClean = []; // Data Clean\n// data.forEach((element) => {\n//   dataClean.push({\n//     position: { lng: element.Longitude, lat: element.Latitude },\n//     text: PriceData(element),\n//   });\n// });\n// Price Data Log function - new\n\nfunction PriceData(element) {\n  let labelText = `No.: ${element.MlsNumber}, ${element.Bedrooms} rooms</br>\n  ${element.ListingAddress}</br></br>`;\n  const data = element.history;\n  data[0].forEach((element, indx) => {\n    labelText = `${labelText} ∙ ${element}: ${data[1][indx]} </br>`;\n  });\n  labelText = `${labelText}</br>${element.days_on_market} days on market</br>status: ${element.status}`;\n  return labelText;\n}\n\n_c = PriceData;\n\nconst MainMap = () => {\n  _s();\n\n  // approach 1: pre-filter dataClean here, then re-render map\n  const [markers, setMarkers] = useState(dataClean);\n  const [checked, setChecked] = useState(false);\n  data.forEach(element => {\n    // if 2 bedrooms were chosen then push them into an array and print when submit\n    dataClean.push({\n      position: {\n        lng: element.Longitude,\n        lat: element.Latitude\n      },\n      text: PriceData(element)\n    });\n  }); // approach 2: post-filter markers here, then ?\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"2 Bedrooms:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: \"{checked}\",\n          onChange: setChecked()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: checked ? \"checked\" : \"not checked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Map, {\n      center: position,\n      zoom: 2,\n      style: mapStyle,\n      maxZoom: 18,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkerCluster, {\n        markers: markers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainMap, \"6XcAYzaP441ft00j3W4GpneDyxc=\");\n\n_c2 = MainMap;\nexport default MainMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceData\");\n$RefreshReg$(_c2, \"MainMap\");","map":{"version":3,"sources":["/Users/alba/Documents/GitHub/pricemap/src/MainMap.js"],"names":["React","useState","Map","TileLayer","MarkerCluster","data","position","mapStyle","height","dataClean","PriceData","element","labelText","MlsNumber","Bedrooms","ListingAddress","history","forEach","indx","days_on_market","status","MainMap","markers","setMarkers","checked","setChecked","push","lng","Longitude","lat","Latitude","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,eAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,QAAQ,GAAG,CAAC,MAAD,EAAS,CAAC,MAAV,CAAjB;AACA,MAAMC,QAAQ,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAjB;AAEA,IAAIC,SAAS,GAAG,EAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,MAAIC,SAAS,GAAI,QAAOD,OAAO,CAACE,SAAU,KAAIF,OAAO,CAACG,QAAS;AACjE,IAAIH,OAAO,CAACI,cAAe,YADzB;AAEA,QAAMV,IAAI,GAAGM,OAAO,CAACK,OAArB;AACAX,EAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQY,OAAR,CAAgB,CAACN,OAAD,EAAUO,IAAV,KAAmB;AACjCN,IAAAA,SAAS,GAAI,GAAEA,SAAU,MAAKD,OAAQ,KAAIN,IAAI,CAAC,CAAD,CAAJ,CAAQa,IAAR,CAAc,QAAxD;AACD,GAFD;AAIAN,EAAAA,SAAS,GAAI,GAAEA,SAAU,QAAOD,OAAO,CAACQ,cAAe,+BAA8BR,OAAO,CAACS,MAAO,EAApG;AAEA,SAAOR,SAAP;AACD;;KAXQF,S;;AAaT,MAAMW,OAAO,GAAG,MAAM;AAAA;;AACpB;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAACQ,SAAD,CAAtC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,KAAD,CAAtC;AAEAI,EAAAA,IAAI,CAACY,OAAL,CAAcN,OAAD,IAAa;AACxB;AACAF,IAAAA,SAAS,CAACiB,IAAV,CAAe;AACbpB,MAAAA,QAAQ,EAAE;AAAEqB,QAAAA,GAAG,EAAEhB,OAAO,CAACiB,SAAf;AAA0BC,QAAAA,GAAG,EAAElB,OAAO,CAACmB;AAAvC,OADG;AAEbC,MAAAA,IAAI,EAAErB,SAAS,CAACC,OAAD;AAFF,KAAf;AAID,GAND,EANoB,CAcpB;;AAEA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA,+CAEE;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,KAAK,EAAC,WAA7B;AAAyC,UAAA,QAAQ,EAAEc,UAAU;AAA7D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBAAID,OAAO,GAAG,SAAH,GAAe;AAA1B;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,GAAD;AAAK,MAAA,MAAM,EAAElB,QAAb;AAAuB,MAAA,IAAI,EAAE,CAA7B;AAAgC,MAAA,KAAK,EAAEC,QAAvC;AAAiD,MAAA,OAAO,EAAE,EAA1D;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,GAAG,EAAC,yCADN;AAEE,QAAA,WAAW,EAAC;AAFd;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,aAAD;AAAe,QAAA,OAAO,EAAEe;AAAxB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAmBD,CAnCD;;GAAMD,O;;MAAAA,O;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport MarkerCluster from \"./MarkerCluster\";\nimport data from \"./data\";\n\nconst position = [45.503, -73.595];\nconst mapStyle = { height: \"90vh\" };\n\nlet dataClean = [];\n\n// Data Clean\n// data.forEach((element) => {\n//   dataClean.push({\n//     position: { lng: element.Longitude, lat: element.Latitude },\n//     text: PriceData(element),\n//   });\n// });\n\n// Price Data Log function - new\n\nfunction PriceData(element) {\n  let labelText = `No.: ${element.MlsNumber}, ${element.Bedrooms} rooms</br>\n  ${element.ListingAddress}</br></br>`;\n  const data = element.history;\n  data[0].forEach((element, indx) => {\n    labelText = `${labelText} ∙ ${element}: ${data[1][indx]} </br>`;\n  });\n\n  labelText = `${labelText}</br>${element.days_on_market} days on market</br>status: ${element.status}`;\n\n  return labelText;\n}\n\nconst MainMap = () => {\n  // approach 1: pre-filter dataClean here, then re-render map\n\n  const [markers, setMarkers] = useState(dataClean);\n  const [checked, setChecked] = useState(false);\n\n  data.forEach((element) => {\n    // if 2 bedrooms were chosen then push them into an array and print when submit\n    dataClean.push({\n      position: { lng: element.Longitude, lat: element.Latitude },\n      text: PriceData(element),\n    });\n  });\n\n  // approach 2: post-filter markers here, then ?\n\n  return (\n    <>\n      <form>\n        <label>\n          2 Bedrooms:\n          <input type=\"checkbox\" value=\"{checked}\" onChange={setChecked()} />\n        </label>\n        <p>{checked ? \"checked\" : \"not checked\"}</p>\n      </form>\n\n      <Map center={position} zoom={2} style={mapStyle} maxZoom={18}>\n        <TileLayer\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <MarkerCluster markers={markers} />\n      </Map>\n    </>\n  );\n};\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}