{"ast":null,"code":"var _jsxFileName = \"/Users/alba/Documents/GitHub/pricemap/src/MainMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport MarkerCluster from \"./MarkerCluster\";\nimport data from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst position = [45.503, -73.595];\nconst mapStyle = {\n  height: \"90vh\"\n};\nlet dataClean = []; // Data Clean\n\ndata.forEach(element => {\n  dataClean.push({\n    position: {\n      lng: element.Longitude,\n      lat: element.Latitude\n    },\n    text: PriceData(element)\n  });\n}); // Price Data Log function - new\n\nfunction PriceData(element) {\n  let labelText = `No.: ${element.MlsNumber}, ${element.Bedrooms} rooms</br>\n  ${element.ListingAddress}</br></br>`;\n  const data = element.history;\n  data[0].forEach((element, indx) => {\n    labelText = `${labelText} ∙ ${element}: ${data[1][indx]} </br>`;\n  });\n  labelText = `${labelText}</br>${element.days_on_market} days on market</br>status: ${element.status}`;\n  return labelText;\n}\n\n_c = PriceData;\n\nconst MainMap = () => {\n  _s();\n\n  // approach 1: pre-filter dataClean here, then re-render map\n  const [markers, setMarkers] = useState(dataClean);\n\n  const handleClick = () => {\n    console.log(\"try\");\n  }; // approach 2: post-filter markers here, then ?\n\n\n  console.log(markers);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Filters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \"return \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"New Markers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 14\n    }, this), \";\", /*#__PURE__*/_jsxDEV(Map, {\n      center: position,\n      zoom: 2,\n      style: mapStyle,\n      maxZoom: 18,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MarkerCluster, {\n        markers: markers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainMap, \"ip/rF1zjii90QUHmBIweDYKRZ3w=\");\n\n_c2 = MainMap;\nexport default MainMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceData\");\n$RefreshReg$(_c2, \"MainMap\");","map":{"version":3,"sources":["/Users/alba/Documents/GitHub/pricemap/src/MainMap.js"],"names":["React","useState","Map","TileLayer","MarkerCluster","data","position","mapStyle","height","dataClean","forEach","element","push","lng","Longitude","lat","Latitude","text","PriceData","labelText","MlsNumber","Bedrooms","ListingAddress","history","indx","days_on_market","status","MainMap","markers","setMarkers","handleClick","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,eAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,QAAQ,GAAG,CAAC,MAAD,EAAS,CAAC,MAAV,CAAjB;AACA,MAAMC,QAAQ,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAjB;AAEA,IAAIC,SAAS,GAAG,EAAhB,C,CAEA;;AACAJ,IAAI,CAACK,OAAL,CAAcC,OAAD,IAAa;AACxBF,EAAAA,SAAS,CAACG,IAAV,CAAe;AACbN,IAAAA,QAAQ,EAAE;AAAEO,MAAAA,GAAG,EAAEF,OAAO,CAACG,SAAf;AAA0BC,MAAAA,GAAG,EAAEJ,OAAO,CAACK;AAAvC,KADG;AAEbC,IAAAA,IAAI,EAAEC,SAAS,CAACP,OAAD;AAFF,GAAf;AAID,CALD,E,CAOA;;AAEA,SAASO,SAAT,CAAmBP,OAAnB,EAA4B;AAC1B,MAAIQ,SAAS,GAAI,QAAOR,OAAO,CAACS,SAAU,KAAIT,OAAO,CAACU,QAAS;AACjE,IAAIV,OAAO,CAACW,cAAe,YADzB;AAEA,QAAMjB,IAAI,GAAGM,OAAO,CAACY,OAArB;AACAlB,EAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQK,OAAR,CAAgB,CAACC,OAAD,EAAUa,IAAV,KAAmB;AACjCL,IAAAA,SAAS,GAAI,GAAEA,SAAU,MAAKR,OAAQ,KAAIN,IAAI,CAAC,CAAD,CAAJ,CAAQmB,IAAR,CAAc,QAAxD;AACD,GAFD;AAIAL,EAAAA,SAAS,GAAI,GAAEA,SAAU,QAAOR,OAAO,CAACc,cAAe,+BAA8Bd,OAAO,CAACe,MAAO,EAApG;AAEA,SAAOP,SAAP;AACD;;KAXQD,S;;AAaT,MAAMS,OAAO,GAAG,MAAM;AAAA;;AACpB;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAACQ,SAAD,CAAtC;;AAEA,QAAMqB,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,GAFD,CALoB,CASpB;;;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,0BAES;AAAQ,MAAA,OAAO,EAAEE,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFT,oBAGE,QAAC,GAAD;AAAK,MAAA,MAAM,EAAExB,QAAb;AAAuB,MAAA,IAAI,EAAE,CAA7B;AAAgC,MAAA,KAAK,EAAEC,QAAvC;AAAiD,MAAA,OAAO,EAAE,EAA1D;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,GAAG,EAAC,yCADN;AAEE,QAAA,WAAW,EAAC;AAFd;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,aAAD;AAAe,QAAA,OAAO,EAAEqB;AAAxB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAaD,CAzBD;;GAAMD,O;;MAAAA,O;AA2BN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport MarkerCluster from \"./MarkerCluster\";\nimport data from \"./data\";\n\nconst position = [45.503, -73.595];\nconst mapStyle = { height: \"90vh\" };\n\nlet dataClean = [];\n\n// Data Clean\ndata.forEach((element) => {\n  dataClean.push({\n    position: { lng: element.Longitude, lat: element.Latitude },\n    text: PriceData(element),\n  });\n});\n\n// Price Data Log function - new\n\nfunction PriceData(element) {\n  let labelText = `No.: ${element.MlsNumber}, ${element.Bedrooms} rooms</br>\n  ${element.ListingAddress}</br></br>`;\n  const data = element.history;\n  data[0].forEach((element, indx) => {\n    labelText = `${labelText} ∙ ${element}: ${data[1][indx]} </br>`;\n  });\n\n  labelText = `${labelText}</br>${element.days_on_market} days on market</br>status: ${element.status}`;\n\n  return labelText;\n}\n\nconst MainMap = () => {\n  // approach 1: pre-filter dataClean here, then re-render map\n\n  const [markers, setMarkers] = useState(dataClean);\n\n  const handleClick = () => {\n    console.log(\"try\");\n  };\n\n  // approach 2: post-filter markers here, then ?\n  console.log(markers);\n\n  return (\n    <>\n      <h1>Filters</h1>\n      return <button onClick={handleClick}>New Markers</button>;\n      <Map center={position} zoom={2} style={mapStyle} maxZoom={18}>\n        <TileLayer\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <MarkerCluster markers={markers} />\n      </Map>\n    </>\n  );\n};\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}